(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var OrderHistory =
/*#__PURE__*/
function (_React$Component) {
  _inherits(OrderHistory, _React$Component);

  function OrderHistory() {
    _classCallCheck(this, OrderHistory);

    return _possibleConstructorReturn(this, _getPrototypeOf(OrderHistory).apply(this, arguments));
  }

  _createClass(OrderHistory, [{
    key: "render",
    value: function render() {
      return "list";
    }
  }]);

  return OrderHistory;
}(React.Component);

var _default = OrderHistory;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

var _OrderHistory = _interopRequireDefault(require("./Container/OrderHistory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var domElements = document.getElementsByClassName("modularity-order-history");
var _modOrderHistory = modOrderHistory,
    translation = _modOrderHistory.translation;

for (var i = 0; i < domElements.length; i++) {
  var element = domElements[i];
  ReactDOM.render(React.createElement(_OrderHistory.default, {
    translation: translation
  }), element);
}

},{"./Container/OrderHistory":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzb3VyY2UvanMvT3JkZXJIaXN0b3J5L0NvbnRhaW5lci9PcmRlckhpc3RvcnkuanMiLCJzb3VyY2UvanMvT3JkZXJIaXN0b3J5L0luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQ0FNLFk7Ozs7Ozs7Ozs7Ozs7NkJBQ087QUFDTCxhQUFPLE1BQVA7QUFDSDs7OztFQUhzQixLQUFLLENBQUMsUzs7ZUFNbEIsWTs7Ozs7O0FDTmY7Ozs7QUFFQSxJQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsc0JBQVQsQ0FBZ0MsMEJBQWhDLENBQXBCO3VCQUNzQixlO0lBQWYsVyxvQkFBQSxXOztBQUVQLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQWhDLEVBQXdDLENBQUMsRUFBekMsRUFBNkM7QUFDekMsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLENBQUQsQ0FBM0I7QUFDQSxFQUFBLFFBQVEsQ0FBQyxNQUFULENBQ0ksb0JBQUMscUJBQUQ7QUFDSSxJQUFBLFdBQVcsRUFBRTtBQURqQixJQURKLEVBSUksT0FKSjtBQU1IIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY2xhc3MgT3JkZXJIaXN0b3J5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBcImxpc3RcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVySGlzdG9yeTsiLCJpbXBvcnQgT3JkZXJIaXN0b3J5IGZyb20gJy4vQ29udGFpbmVyL09yZGVySGlzdG9yeSc7XG5cbmNvbnN0IGRvbUVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1vZHVsYXJpdHktb3JkZXItaGlzdG9yeVwiKTtcbmNvbnN0IHt0cmFuc2xhdGlvbn0gPSBtb2RPcmRlckhpc3Rvcnk7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgZG9tRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9tRWxlbWVudHNbaV07XG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8T3JkZXJIaXN0b3J5XG4gICAgICAgICAgICB0cmFuc2xhdGlvbj17dHJhbnNsYXRpb259XG4gICAgICAgIC8+LFxuICAgICAgICBlbGVtZW50XG4gICAgKTtcbn1cbiJdfQ==

//# sourceMappingURL=data:application/json;charset=utf8;base64,
